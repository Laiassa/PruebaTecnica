name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - Prueba3/index.html
      
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
          run:
            working-directory: Prueba3

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker Image
      run: |
        docker build -t yourhouse/nginx-prueba3:latest .

    - name: Push Docker Image to Docker Hub
      run: |
        docker push yourhouse/nginx-prueba3:latest

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2 

    - name: Update ECS service to force new deployment
      run: |
        # Force a new deployment of the ECS service
        aws ecs update-service \
          --cluster PruebaCluster \
          --service web-service \
          --force-new-deployment
   
    - name: Get ECS Task ID
      id: get_task_id
      run: |
        TASK_ID=$(aws ecs list-tasks --cluster PruebaCluster --service-name web-service --desired-status RUNNING --query "taskArns[0]" --output text)
        echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV

    - name: Get Public IP of ECS Task
      id: get_public_ip
      run: |
        # Describe the task to get public IP
        PUBLIC_IP=$(aws ecs describe-tasks --cluster PruebaCluster --tasks ${{ env.TASK_ID }} --query "tasks[0].attachments[0].details[?name=='privateIPv4Address'].value | [0]" --output text)
        
        # If the task is running in a public subnet, fetch the public IP from the ENI (Elastic Network Interface)
        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $(aws ecs describe-tasks --cluster PruebaCluster --tasks ${{ env.TASK_ID }} --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value | [0]" --output text) --query "NetworkInterfaces[0].Association.PublicIp" --output text)
        
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

    - name: Output Public IP
      run: |
        echo "Public IP: ${{ env.PUBLIC_IP }}"
